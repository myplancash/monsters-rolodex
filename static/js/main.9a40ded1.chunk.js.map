{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","react_default","a","createElement","className","alt","src","concat","monster","id","name","email","CardList","monsters","map","card_component_Card","key","SearchBox","_ref","handleChange","term","type","placeholder","onChange","value","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this2","fetch","then","response","json","users","setState","_this3","_this$state","filteredMonsters","filter","toLowerCase","includes","search_box_component_SearchBox","e","target","card_list_component_CardList","Component","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App_0","document","getElementById"],"mappings":"mTAGaA,eAAO,SAACC,GACnB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQC,IAAI,UAAUC,IAAG,wBAAAC,OAA0BP,EAAMQ,QAAQC,GAAxC,2BACxCR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yBAAyBJ,EAAMQ,QAAQE,MACrDT,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAQJ,EAAMQ,QAAQG,YCNjCC,EAAW,SAACZ,GACvB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACZJ,EAAMa,SAASC,IAAI,SAAAN,GAAO,OACzBP,EAAAC,EAAAC,cAACY,EAAD,CAAMC,IAAKR,EAAQC,GAAID,QAASA,QCL3BS,eAAY,SAAAC,GAA0B,IAAxBC,EAAwBD,EAAxBC,aAAcC,EAAUF,EAAVE,KAEvC,OACEnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACbH,EAAAC,EAAAC,cAAA,SACEC,UAAU,aACViB,KAAK,SACLC,YAAY,kBACZC,SAAUJ,EACVK,MAAOJ,IAETnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,aCgCSqB,cAxCb,SAAAA,EAAYzB,GAAO,IAAA0B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAM7B,KAEDiC,MAAQ,CACXpB,SAAU,GACVO,KAAM,IALSM,mFASC,IAAAQ,EAAAL,KAClBM,MAAM,8CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAIL,EAAKM,SAAS,CAAE3B,SAAU0B,uCAIpC,IAAAE,EAAAZ,KAAAa,EAEkBb,KAAKI,MAAvBpB,EAFA6B,EAEA7B,SAAUO,EAFVsB,EAEUtB,KACXuB,EAAmB9B,EAAS+B,OAAO,SAAApC,GAAO,OAC9CA,EAAQE,KAAKmC,cAAcC,SAAS1B,EAAKyB,iBAG3C,OACE5C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,IACZH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBADf,oBAIAH,EAAAC,EAAAC,cAAC4C,EAAD,CACE3B,KAAMA,EACND,aAAc,SAAA6B,GAAC,OAAIP,EAAKD,SAAS,CAACpB,KAAM4B,EAAEC,OAAOzB,WAEnDvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACfH,EAAAC,EAAAC,cAAC+C,EAAD,CAAUrC,SAAU8B,YAnCVQ,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAP,EAAA,GAAAZ,KAAAmB,EAAAC,KAAA,UAAqBpB,KAAK,SAAAlB,GAAiD,IAA9CuC,EAA8CvC,EAA9CuC,OAAQC,EAAsCxC,EAAtCwC,OAAQC,EAA8BzC,EAA9ByC,OAAQC,EAAsB1C,EAAtB0C,OAAQC,EAAc3C,EAAd2C,QAC3DJ,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,MCDdS,IAASC,OACP9D,EAAAC,EAAAC,cAACF,EAAAC,EAAM8D,WAAP,KACE/D,EAAAC,EAAAC,cAAC8D,EAAD,OAEFC,SAASC,eAAe,SAM1Bf","file":"static/js/main.9a40ded1.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nexport const Card = (props) => {\n  return (\n    <div className=\"column\">\n      <div className=\"ui link fluid card\">\n        <img className=\"image\" alt=\"monster\" src={`https://robohash.org/${props.monster.id}set=set2&size=180x180`} />\n        <div className=\"content\">\n          <h1 className=\"header center aligned\">{props.monster.name}</h1>\n          <h2 className=\"meta\">{props.monster.email}</h2>\n        </div>\n      </div>\n    </div>\n  );\n}","import React from 'react';\nimport \"./card-list.styles.css\";\nimport { Card } from '../card/card.component.jsx';\n\nexport const CardList = (props) => {\n  return (\n    <div className=\"ui three column grid\">\n      {props.monsters.map(monster => (\n        <Card key={monster.id} monster={monster}/>\n      ))}\n    </div>\n  )\n}","import React from \"react\";\nimport './search-box.styles.css';\n\nexport const SearchBox = ({handleChange, term}) => {\n\n  return (\n    <div className=\"ui fluid action input\">\n      <input\n        className=\"search-box\"\n        type=\"search\"\n        placeholder=\"Search Monsters\"\n        onChange={handleChange}\n        value={term}\n      />\n      <div className=\"ui button\">Search</div>\n    </div>\n  );\n\n}\n","import React, { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport './App.css';\n import { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      monsters: [],\n      term: \"\"\n    }\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(users => this.setState({ monsters: users}))\n  }\n\n\n  render() {\n\n    const {monsters, term} = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(term.toLowerCase())\n    )\n\n    return (\n      <div className=\"ui container\">\n        <h2 className=\"\">\n          <i className=\"search icon\"></i>\n           Searching Robots\n        </h2>\n        <SearchBox\n          term={term}\n          handleChange={e => this.setState({term: e.target.value})}\n        />\n        <div className=\"ui hidden divider\"></div>\n        <CardList monsters={filteredMonsters} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}